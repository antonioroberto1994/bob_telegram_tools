{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bob Telegram Tools is a python library which allows you to monitor your machine learning trainings just by using Telegram without any additional application. Getting started Look out at the Tutorial section to see several examples about bob_telegram_tools . Installation instructions You can install the package with pip: pip install bob_telegram_tools Repository Here you can find the package source code. License Code released under the GNU GENERAL PUBLIC LICENSE .","title":"Home"},{"location":"#getting-started","text":"Look out at the Tutorial section to see several examples about bob_telegram_tools .","title":"Getting started"},{"location":"#installation-instructions","text":"You can install the package with pip: pip install bob_telegram_tools","title":"Installation instructions"},{"location":"#repository","text":"Here you can find the package source code.","title":"Repository"},{"location":"#license","text":"Code released under the GNU GENERAL PUBLIC LICENSE .","title":"License"},{"location":"bot/","text":"","title":"Bot"},{"location":"bot_ex/","text":"Use a bot In order to use a Bot in your code create a TelegramBot object. <your_token> represents the API token generated by the BotFather and <your_chat_id> is your unique identifier that you can find through the @chatid_echo_bot . from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) Warning You have to start a coversation with your bot before it is able to send you a message! Once you have created your Bot you can send a message and update it without send a notification through the returned reference. sent_message = bot.send_text('Hello TelegramBot!') bot.update_text(sent_message,'Updated hello TelegramBot!')","title":"Use a bot"},{"location":"bot_ex/#use-a-bot","text":"In order to use a Bot in your code create a TelegramBot object. <your_token> represents the API token generated by the BotFather and <your_chat_id> is your unique identifier that you can find through the @chatid_echo_bot . from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) Warning You have to start a coversation with your bot before it is able to send you a message! Once you have created your Bot you can send a message and update it without send a notification through the returned reference. sent_message = bot.send_text('Hello TelegramBot!') bot.update_text(sent_message,'Updated hello TelegramBot!')","title":"Use a bot"},{"location":"bot_father/","text":"Create a Telegram Bot Go to the telegram app on your phone and and follow the steps below: Search for the \u201cbotfather\u201d telegram bot. Make sure its username is exactly @BotFather ; Type /help to see all possible commands the botfather can handle; Click on or type /newbot to create a new bot; Follow instructions and make a new name for your bot; Congratulations! You have created your first bot. You should see a new API token generated for it.","title":"Create a Telegram bot"},{"location":"bot_father/#create-a-telegram-bot","text":"Go to the telegram app on your phone and and follow the steps below: Search for the \u201cbotfather\u201d telegram bot. Make sure its username is exactly @BotFather ; Type /help to see all possible commands the botfather can handle; Click on or type /newbot to create a new bot; Follow instructions and make a new name for your bot; Congratulations! You have created your first bot. You should see a new API token generated for it.","title":"Create a Telegram Bot"},{"location":"keras/","text":"","title":"Keras"},{"location":"keras_ex/","text":"Keras Callback In order to receive all the updates of your model training let you use the KerasTelegramCallback . You can choose if to receive the current epoch progress bar and metrics plots! Example Screenshot Code import keras from keras.models import Sequential from keras.layers import Dense from keras.optimizers import RMSprop import numpy as np from bob_telegram_tools.keras import KerasTelegramCallback from bob_telegram_tools.bot import TelegramBot X = np.random.rand(1000, 100) y = (np.random.rand(1000, 3) > 0.5).astype('float32') model = Sequential() model.add(Dense(512, activation='relu', input_shape=(100,))) model.add(Dense(512, activation='relu')) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy']) n_epochs = 3 token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) tl = KerasTelegramCallback(bot, epoch_bar=True, to_plot=[ { 'metrics': ['loss', 'val_loss'] }, { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ]) history = model.fit(X, y, batch_size=10, epochs=n_epochs, validation_split=0.15, callbacks=[tl])","title":"Keras Callback"},{"location":"keras_ex/#keras-callback","text":"In order to receive all the updates of your model training let you use the KerasTelegramCallback . You can choose if to receive the current epoch progress bar and metrics plots!","title":"Keras Callback"},{"location":"keras_ex/#example","text":"","title":"Example"},{"location":"keras_ex/#screenshot","text":"","title":"Screenshot"},{"location":"keras_ex/#code","text":"import keras from keras.models import Sequential from keras.layers import Dense from keras.optimizers import RMSprop import numpy as np from bob_telegram_tools.keras import KerasTelegramCallback from bob_telegram_tools.bot import TelegramBot X = np.random.rand(1000, 100) y = (np.random.rand(1000, 3) > 0.5).astype('float32') model = Sequential() model.add(Dense(512, activation='relu', input_shape=(100,))) model.add(Dense(512, activation='relu')) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy']) n_epochs = 3 token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) tl = KerasTelegramCallback(bot, epoch_bar=True, to_plot=[ { 'metrics': ['loss', 'val_loss'] }, { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ]) history = model.fit(X, y, batch_size=10, epochs=n_epochs, validation_split=0.15, callbacks=[tl])","title":"Code"},{"location":"utilities/","text":"","title":"Utils"},{"location":"utilities_ex/","text":"Telegram Progress Bar In order to receive a progress bar not strictly related to your keras training you can use the TelegramTqdm class by simple reusing the (widely adopted) tqdm interface. Example Screenshot Code from time import sleep from bob_telegram_tools.utils import TelegramTqdm from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) pb = TelegramTqdm(bot) for i in pb(range(20)): sleep(1)","title":"Telegram ProgressBar"},{"location":"utilities_ex/#telegram-progress-bar","text":"In order to receive a progress bar not strictly related to your keras training you can use the TelegramTqdm class by simple reusing the (widely adopted) tqdm interface.","title":"Telegram Progress Bar"},{"location":"utilities_ex/#example","text":"","title":"Example"},{"location":"utilities_ex/#screenshot","text":"","title":"Screenshot"},{"location":"utilities_ex/#code","text":"from time import sleep from bob_telegram_tools.utils import TelegramTqdm from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) pb = TelegramTqdm(bot) for i in pb(range(20)): sleep(1)","title":"Code"}]}
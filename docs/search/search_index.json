{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bob Telegram Tools is a python library which allows you to monitor your machine learning trainings just by using Telegram without any additional application. Getting started Look out at the Tutorial section to see several examples about bob_telegram_tools . Installation instructions You can install the package with pip: pip install bob-telegram-tools Repository Here you can find the package source code. License Code released under the GNU GENERAL PUBLIC LICENSE .","title":"Home"},{"location":"#getting-started","text":"Look out at the Tutorial section to see several examples about bob_telegram_tools .","title":"Getting started"},{"location":"#installation-instructions","text":"You can install the package with pip: pip install bob-telegram-tools","title":"Installation instructions"},{"location":"#repository","text":"Here you can find the package source code.","title":"Repository"},{"location":"#license","text":"Code released under the GNU GENERAL PUBLIC LICENSE .","title":"License"},{"location":"bot/","text":"Package containing the TelegramBot core class. InputError Base class for input exception. TelegramBot This class allows to send through a Telegram Bot text, images and plots. Furthermore the send messages can be updated. __init__ ( self , token = None , user_ids = None , cred_file = None , tmp_dir = './temp/' ) special Constructor Warning At least one between (token, user_ids) and cred_file has to be passed. Parameters: Name Type Description Default token str Telegram token None user_ids Union[int, list] Telegram chat id to which send the messages None cred_file Union[str, dict] Path to or the dict containing the token and the user_ids. { \"token\": \"<your_token>\", \"user_ids\": <user_id> } None tmp_dir Folder in which store the temporary images. The folder will be created if not existing. './temp/' Source code in bob_telegram_tools\\bot.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def __init__ ( self , token : str = None , user_ids : Union [ int , list ] = None , cred_file : Union [ str , dict ] = None , tmp_dir = './temp/' ): \"\"\" Constructor !!! warning At least one between (token, user_ids) and cred_file has to be passed. Arguments: token : Telegram token user_ids : Telegram chat id to which send the messages cred_file : Path to or the dict containing the token and the user_ids. ```json { \"token\": \"<your_token>\", \"user_ids\": <user_id> } ``` tmp_dir : Folder in which store the temporary images. The folder will be created if not existing. \"\"\" if user_ids == cred_file == user_ids : raise InputError ( 'At least one between (token, user_ids) and cred_file has to be passed.' ) if cred_file is not None : with open ( cred_file ) as json_file : data = json . load ( json_file ) token = data [ 'token' ] user_ids = data [ 'user_ids' ] self . bot = telegram . Bot ( token ) self . user_ids = user_ids self . tmp_dir = tmp_dir clean_tmp_dir ( self ) Delete temporary folder function. Source code in bob_telegram_tools\\bot.py 174 175 176 177 178 def clean_tmp_dir ( self ): \"\"\" Delete temporary folder function. \"\"\" shutil . rmtree ( self . tmp_dir ) send_image ( self , img_path ) Send plot function. Returns the message obj needed for the update method. Parameters: Name Type Description Default img_path str Path of the image file to send required Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 134 135 136 137 138 139 140 141 142 143 144 145 def send_image ( self , img_path : str ) -> telegram . Message : \"\"\" Send plot function. Returns the message obj needed for the update method. Arguments: img_path : Path of the image file to send Returns: Message Object \"\"\" return self . bot . send_photo ( self . user_ids , open ( img_path , 'rb' )) send_plot ( self , plt , name = None ) Send plot function. Returns the message obj needed for the update method. Parameters: Name Type Description Default plt Plot to send required name str Name of the temporary file None Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 def send_plot ( self , plt , name : str = None ) -> telegram . Message : \"\"\" Send plot function. Returns the message obj needed for the update method. Arguments: plt : Plot to send name : Name of the temporary file Returns: Message Object \"\"\" if not os . path . exists ( self . tmp_dir ): os . makedirs ( self . tmp_dir ) if name is None : ts = int ( time . time ()) img_path = self . tmp_dir + str ( ts ) + '.png' else : img_path = self . tmp_dir + name plt . savefig ( img_path , dpi = 100 ) return self . bot . send_photo ( self . user_ids , open ( img_path , 'rb' )) send_text ( self , text ) Send text function. Returns the message obj needed for the update method. Parameters: Name Type Description Default text str Text to send required Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 63 64 65 66 67 68 69 70 71 72 73 74 def send_text ( self , text : str ) -> telegram . Message : \"\"\" Send text function. Returns the message obj needed for the update method. Arguments: text : Text to send Returns: Message Object \"\"\" return self . bot . send_message ( self . user_ids , text ) update_plot ( self , message , plt , name = None ) Update plot function. Parameters: Name Type Description Default message Message Message to update required plt New plot to send required name str Name of the temporary file None Source code in bob_telegram_tools\\bot.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def update_plot ( self , message : telegram . Message , plt , name : str = None ): \"\"\" Update plot function. Arguments: message : Message to update plt : New plot to send name : Name of the temporary file \"\"\" if not os . path . exists ( self . tmp_dir ): os . makedirs ( self . tmp_dir ) if name is None : ts = int ( time . time ()) img_path = self . tmp_dir + str ( ts ) + '.png' else : img_path = self . tmp_dir + name plt . savefig ( img_path , dpi = 100 ) new_media = telegram . InputMediaPhoto ( open ( img_path , 'rb' )) try : message . edit_media ( new_media ) except Exception as e : pass update_text ( self , message , text ) Update text function. Parameters: Name Type Description Default message Message Message to update required text str New text to send required Source code in bob_telegram_tools\\bot.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def update_text ( self , message : telegram . Message , text : str ): \"\"\" Update text function. Arguments: message : Message to update text : New text to send \"\"\" if message . text != text : try : message . edit_text ( text ) except Exception as e : pass","title":"Bot"},{"location":"bot/#bob_telegram_tools.bot","text":"Package containing the TelegramBot core class.","title":"bob_telegram_tools.bot"},{"location":"bot/#bob_telegram_tools.bot.InputError","text":"Base class for input exception.","title":"InputError"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot","text":"This class allows to send through a Telegram Bot text, images and plots. Furthermore the send messages can be updated.","title":"TelegramBot"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.__init__","text":"Constructor Warning At least one between (token, user_ids) and cred_file has to be passed. Parameters: Name Type Description Default token str Telegram token None user_ids Union[int, list] Telegram chat id to which send the messages None cred_file Union[str, dict] Path to or the dict containing the token and the user_ids. { \"token\": \"<your_token>\", \"user_ids\": <user_id> } None tmp_dir Folder in which store the temporary images. The folder will be created if not existing. './temp/' Source code in bob_telegram_tools\\bot.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def __init__ ( self , token : str = None , user_ids : Union [ int , list ] = None , cred_file : Union [ str , dict ] = None , tmp_dir = './temp/' ): \"\"\" Constructor !!! warning At least one between (token, user_ids) and cred_file has to be passed. Arguments: token : Telegram token user_ids : Telegram chat id to which send the messages cred_file : Path to or the dict containing the token and the user_ids. ```json { \"token\": \"<your_token>\", \"user_ids\": <user_id> } ``` tmp_dir : Folder in which store the temporary images. The folder will be created if not existing. \"\"\" if user_ids == cred_file == user_ids : raise InputError ( 'At least one between (token, user_ids) and cred_file has to be passed.' ) if cred_file is not None : with open ( cred_file ) as json_file : data = json . load ( json_file ) token = data [ 'token' ] user_ids = data [ 'user_ids' ] self . bot = telegram . Bot ( token ) self . user_ids = user_ids self . tmp_dir = tmp_dir","title":"__init__()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.clean_tmp_dir","text":"Delete temporary folder function. Source code in bob_telegram_tools\\bot.py 174 175 176 177 178 def clean_tmp_dir ( self ): \"\"\" Delete temporary folder function. \"\"\" shutil . rmtree ( self . tmp_dir )","title":"clean_tmp_dir()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.send_image","text":"Send plot function. Returns the message obj needed for the update method. Parameters: Name Type Description Default img_path str Path of the image file to send required Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 134 135 136 137 138 139 140 141 142 143 144 145 def send_image ( self , img_path : str ) -> telegram . Message : \"\"\" Send plot function. Returns the message obj needed for the update method. Arguments: img_path : Path of the image file to send Returns: Message Object \"\"\" return self . bot . send_photo ( self . user_ids , open ( img_path , 'rb' ))","title":"send_image()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.send_plot","text":"Send plot function. Returns the message obj needed for the update method. Parameters: Name Type Description Default plt Plot to send required name str Name of the temporary file None Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 def send_plot ( self , plt , name : str = None ) -> telegram . Message : \"\"\" Send plot function. Returns the message obj needed for the update method. Arguments: plt : Plot to send name : Name of the temporary file Returns: Message Object \"\"\" if not os . path . exists ( self . tmp_dir ): os . makedirs ( self . tmp_dir ) if name is None : ts = int ( time . time ()) img_path = self . tmp_dir + str ( ts ) + '.png' else : img_path = self . tmp_dir + name plt . savefig ( img_path , dpi = 100 ) return self . bot . send_photo ( self . user_ids , open ( img_path , 'rb' ))","title":"send_plot()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.send_text","text":"Send text function. Returns the message obj needed for the update method. Parameters: Name Type Description Default text str Text to send required Returns: Type Description Message Message Object Source code in bob_telegram_tools\\bot.py 63 64 65 66 67 68 69 70 71 72 73 74 def send_text ( self , text : str ) -> telegram . Message : \"\"\" Send text function. Returns the message obj needed for the update method. Arguments: text : Text to send Returns: Message Object \"\"\" return self . bot . send_message ( self . user_ids , text )","title":"send_text()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.update_plot","text":"Update plot function. Parameters: Name Type Description Default message Message Message to update required plt New plot to send required name str Name of the temporary file None Source code in bob_telegram_tools\\bot.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 def update_plot ( self , message : telegram . Message , plt , name : str = None ): \"\"\" Update plot function. Arguments: message : Message to update plt : New plot to send name : Name of the temporary file \"\"\" if not os . path . exists ( self . tmp_dir ): os . makedirs ( self . tmp_dir ) if name is None : ts = int ( time . time ()) img_path = self . tmp_dir + str ( ts ) + '.png' else : img_path = self . tmp_dir + name plt . savefig ( img_path , dpi = 100 ) new_media = telegram . InputMediaPhoto ( open ( img_path , 'rb' )) try : message . edit_media ( new_media ) except Exception as e : pass","title":"update_plot()"},{"location":"bot/#bob_telegram_tools.bot.TelegramBot.update_text","text":"Update text function. Parameters: Name Type Description Default message Message Message to update required text str New text to send required Source code in bob_telegram_tools\\bot.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def update_text ( self , message : telegram . Message , text : str ): \"\"\" Update text function. Arguments: message : Message to update text : New text to send \"\"\" if message . text != text : try : message . edit_text ( text ) except Exception as e : pass","title":"update_text()"},{"location":"bot_ex/","text":"Use a bot In order to use a Bot in your code create a TelegramBot object. <your_token> represents the API token generated by the BotFather and <your_chat_id> is your unique identifier that you can find through the @chatid_echo_bot . from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) Warning You have to start a coversation with your bot before it is able to send you a message! Once you have created your Bot you can send a message and update it without send a notification through the returned reference. sent_message = bot.send_text('Hello TelegramBot!') bot.update_text(sent_message,'Updated hello TelegramBot!')","title":"Use a bot"},{"location":"bot_ex/#use-a-bot","text":"In order to use a Bot in your code create a TelegramBot object. <your_token> represents the API token generated by the BotFather and <your_chat_id> is your unique identifier that you can find through the @chatid_echo_bot . from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) Warning You have to start a coversation with your bot before it is able to send you a message! Once you have created your Bot you can send a message and update it without send a notification through the returned reference. sent_message = bot.send_text('Hello TelegramBot!') bot.update_text(sent_message,'Updated hello TelegramBot!')","title":"Use a bot"},{"location":"bot_father/","text":"Create a Telegram Bot Go to the telegram app on your phone and and follow the steps below: Search for the \u201cbotfather\u201d telegram bot. Make sure its username is exactly @BotFather ; Type /help to see all possible commands the botfather can handle; Click on or type /newbot to create a new bot; Follow instructions and make a new name for your bot; Congratulations! You have created your first bot. You should see a new API token generated for it.","title":"Create a Telegram bot"},{"location":"bot_father/#create-a-telegram-bot","text":"Go to the telegram app on your phone and and follow the steps below: Search for the \u201cbotfather\u201d telegram bot. Make sure its username is exactly @BotFather ; Type /help to see all possible commands the botfather can handle; Click on or type /newbot to create a new bot; Follow instructions and make a new name for your bot; Congratulations! You have created your first bot. You should see a new API token generated for it.","title":"Create a Telegram Bot"},{"location":"keras/","text":"Package containing the Telegram Keras functions and classes. KerasTelegramCallback This class allows to send through a Telegram Bot updates about your training. __init__ ( self , bot , epoch_bar = True , to_plot = []) special Constructor Parameters: Name Type Description Default bot TelegramBot TelegramBot object required epoch_bar bool True to receive the current epoch progress bar True to_plot list list of dict contaings plot details (e.g. metric to plots and style) { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } [] Source code in bob_telegram_tools\\keras.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def __init__ ( self , bot : TelegramBot , epoch_bar : bool = True , to_plot : list = []): \"\"\" Constructor Arguments: bot: TelegramBot object epoch_bar: True to receive the current epoch progress bar to_plot: list of dict contaings plot details (e.g. metric to plots and style) ```python { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ``` \"\"\" self . bot = bot self . name = str ( int ( time . time ())) + '.png' self . epoch_bar = epoch_bar if self . epoch_bar : self . pbar = None self . to_plot = to_plot self . plot_id = {} for i in range ( len ( self . to_plot )): p = self . to_plot [ i ] p [ 'id' ] = i self . plot_id [ p [ 'id' ]] = None on_batch_begin ( self , batch , logs = {}) A backwards compatibility alias for on_train_batch_begin . Source code in bob_telegram_tools\\keras.py 76 77 78 79 80 def on_batch_begin ( self , batch , logs = {}): if self . epoch_bar : if self . pbar is None : self . obj = TelegramTqdm ( self . bot ) self . pbar = self . obj ( total = self . n_steps ) on_batch_end ( self , batch , logs = {}) A backwards compatibility alias for on_train_batch_end . Source code in bob_telegram_tools\\keras.py 82 83 84 85 86 87 88 89 90 def on_batch_end ( self , batch , logs = {}): if self . epoch_bar : message = '' for m in self . metrics : if 'val_' not in m : message += m + ( ': %.4f - ' % logs [ m ]) self . pbar . set_description ( message [: - 3 ]) self . pbar . update ( 1 ) on_epoch_end ( self , batch , logs = {}) Called at the end of an epoch. Subclasses should override for any actions to run. This function should only be called during TRAIN mode. Parameters: Name Type Description Default epoch integer, index of epoch. required logs dict, metric results for this training epoch, and for the validation epoch if validation is performed. Validation result keys are prefixed with val_ . {} Source code in bob_telegram_tools\\keras.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def on_epoch_end ( self , batch , logs = {}): self . current_epoch += 1 fields = [ 'Status' , 'Epoch' ] units = [ '' , '' ] values = [ 'TRAINING' , str ( self . current_epoch ) + '/' + str ( self . n_epochs )] self . bot . update_structured_text ( self . msg , fields , values , units ) for m in self . metrics : self . history [ m ] . append ( logs [ m ]) for plot_par in self . to_plot : self . plot_id [ plot_par [ 'id' ]] = self . plot ( plot_par , self . plot_id [ plot_par [ 'id' ]]) on_train_begin ( self , logs = {}) Called at the beginning of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. {} Source code in bob_telegram_tools\\keras.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def on_train_begin ( self , logs = {}): self . n_epochs = self . params [ 'epochs' ] self . metrics = self . params [ 'metrics' ] self . n_steps = self . params [ 'samples' ] // self . params [ 'batch_size' ] self . n_steps += 1 if self . params [ 'samples' ] % self . params [ 'batch_size' ] != 0 else 0 self . history = {} for metric in self . metrics : self . history [ metric ] = [] self . current_epoch = 0 fields = [ 'Status' , 'Epoch' ] units = [ '' , '' ] values = [ 'TRAINING' , str ( self . current_epoch ) + '/' + str ( self . n_epochs )] self . msg = self . bot . send_structured_text ( fields , values , units ) on_train_end ( self , logs = {}) Called at the end of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. {} Source code in bob_telegram_tools\\keras.py 108 109 110 111 112 113 def on_train_end ( self , logs = {}): fields = [ 'Status' ] units = [ '' ] values = [ 'TRAINING END' ] self . bot . update_structured_text ( self . msg , fields , values , units )","title":"Keras"},{"location":"keras/#bob_telegram_tools.keras","text":"Package containing the Telegram Keras functions and classes.","title":"bob_telegram_tools.keras"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback","text":"This class allows to send through a Telegram Bot updates about your training.","title":"KerasTelegramCallback"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.__init__","text":"Constructor Parameters: Name Type Description Default bot TelegramBot TelegramBot object required epoch_bar bool True to receive the current epoch progress bar True to_plot list list of dict contaings plot details (e.g. metric to plots and style) { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } [] Source code in bob_telegram_tools\\keras.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def __init__ ( self , bot : TelegramBot , epoch_bar : bool = True , to_plot : list = []): \"\"\" Constructor Arguments: bot: TelegramBot object epoch_bar: True to receive the current epoch progress bar to_plot: list of dict contaings plot details (e.g. metric to plots and style) ```python { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ``` \"\"\" self . bot = bot self . name = str ( int ( time . time ())) + '.png' self . epoch_bar = epoch_bar if self . epoch_bar : self . pbar = None self . to_plot = to_plot self . plot_id = {} for i in range ( len ( self . to_plot )): p = self . to_plot [ i ] p [ 'id' ] = i self . plot_id [ p [ 'id' ]] = None","title":"__init__()"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.on_batch_begin","text":"A backwards compatibility alias for on_train_batch_begin . Source code in bob_telegram_tools\\keras.py 76 77 78 79 80 def on_batch_begin ( self , batch , logs = {}): if self . epoch_bar : if self . pbar is None : self . obj = TelegramTqdm ( self . bot ) self . pbar = self . obj ( total = self . n_steps )","title":"on_batch_begin()"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.on_batch_end","text":"A backwards compatibility alias for on_train_batch_end . Source code in bob_telegram_tools\\keras.py 82 83 84 85 86 87 88 89 90 def on_batch_end ( self , batch , logs = {}): if self . epoch_bar : message = '' for m in self . metrics : if 'val_' not in m : message += m + ( ': %.4f - ' % logs [ m ]) self . pbar . set_description ( message [: - 3 ]) self . pbar . update ( 1 )","title":"on_batch_end()"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.on_epoch_end","text":"Called at the end of an epoch. Subclasses should override for any actions to run. This function should only be called during TRAIN mode. Parameters: Name Type Description Default epoch integer, index of epoch. required logs dict, metric results for this training epoch, and for the validation epoch if validation is performed. Validation result keys are prefixed with val_ . {} Source code in bob_telegram_tools\\keras.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 def on_epoch_end ( self , batch , logs = {}): self . current_epoch += 1 fields = [ 'Status' , 'Epoch' ] units = [ '' , '' ] values = [ 'TRAINING' , str ( self . current_epoch ) + '/' + str ( self . n_epochs )] self . bot . update_structured_text ( self . msg , fields , values , units ) for m in self . metrics : self . history [ m ] . append ( logs [ m ]) for plot_par in self . to_plot : self . plot_id [ plot_par [ 'id' ]] = self . plot ( plot_par , self . plot_id [ plot_par [ 'id' ]])","title":"on_epoch_end()"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.on_train_begin","text":"Called at the beginning of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. {} Source code in bob_telegram_tools\\keras.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def on_train_begin ( self , logs = {}): self . n_epochs = self . params [ 'epochs' ] self . metrics = self . params [ 'metrics' ] self . n_steps = self . params [ 'samples' ] // self . params [ 'batch_size' ] self . n_steps += 1 if self . params [ 'samples' ] % self . params [ 'batch_size' ] != 0 else 0 self . history = {} for metric in self . metrics : self . history [ metric ] = [] self . current_epoch = 0 fields = [ 'Status' , 'Epoch' ] units = [ '' , '' ] values = [ 'TRAINING' , str ( self . current_epoch ) + '/' + str ( self . n_epochs )] self . msg = self . bot . send_structured_text ( fields , values , units )","title":"on_train_begin()"},{"location":"keras/#bob_telegram_tools.keras.KerasTelegramCallback.on_train_end","text":"Called at the end of training. Subclasses should override for any actions to run. Parameters: Name Type Description Default logs dict. Currently no data is passed to this argument for this method but that may change in the future. {} Source code in bob_telegram_tools\\keras.py 108 109 110 111 112 113 def on_train_end ( self , logs = {}): fields = [ 'Status' ] units = [ '' ] values = [ 'TRAINING END' ] self . bot . update_structured_text ( self . msg , fields , values , units )","title":"on_train_end()"},{"location":"keras_ex/","text":"Keras Callback In order to receive all the updates of your model training let you use the KerasTelegramCallback . You can choose if to receive the current epoch progress bar and metrics plots! Example Screenshot Code import keras from keras.models import Sequential from keras.layers import Dense from keras.optimizers import RMSprop import numpy as np from bob_telegram_tools.keras import KerasTelegramCallback from bob_telegram_tools.bot import TelegramBot X = np.random.rand(1000, 100) y = (np.random.rand(1000, 3) > 0.5).astype('float32') model = Sequential() model.add(Dense(512, activation='relu', input_shape=(100,))) model.add(Dense(512, activation='relu')) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy']) n_epochs = 3 token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) tl = KerasTelegramCallback(bot, epoch_bar=True, to_plot=[ { 'metrics': ['loss', 'val_loss'] }, { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ]) history = model.fit(X, y, batch_size=10, epochs=n_epochs, validation_split=0.15, callbacks=[tl])","title":"Keras Callback"},{"location":"keras_ex/#keras-callback","text":"In order to receive all the updates of your model training let you use the KerasTelegramCallback . You can choose if to receive the current epoch progress bar and metrics plots!","title":"Keras Callback"},{"location":"keras_ex/#example","text":"","title":"Example"},{"location":"keras_ex/#screenshot","text":"","title":"Screenshot"},{"location":"keras_ex/#code","text":"import keras from keras.models import Sequential from keras.layers import Dense from keras.optimizers import RMSprop import numpy as np from bob_telegram_tools.keras import KerasTelegramCallback from bob_telegram_tools.bot import TelegramBot X = np.random.rand(1000, 100) y = (np.random.rand(1000, 3) > 0.5).astype('float32') model = Sequential() model.add(Dense(512, activation='relu', input_shape=(100,))) model.add(Dense(512, activation='relu')) model.add(Dense(3, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=RMSprop(), metrics=['accuracy']) n_epochs = 3 token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) tl = KerasTelegramCallback(bot, epoch_bar=True, to_plot=[ { 'metrics': ['loss', 'val_loss'] }, { 'metrics': ['acc', 'val_acc'], 'title':'Accuracy plot', 'ylabel':'acc', 'ylim':(0, 1), 'xlim':(1, n_epochs) } ]) history = model.fit(X, y, batch_size=10, epochs=n_epochs, validation_split=0.15, callbacks=[tl])","title":"Code"},{"location":"plot_ex/","text":"Send a plot The TelegramBot provides a simple to send matplotlib plots. Example Screenshot Code from bob_telegram_tools.bot import TelegramBot import matplotlib.pyplot as plt token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) plt.plot([1, 2, 3, 4]) plt.ylabel('some numbers') bot.send_plot(plt) # This method delete the generetad image bot.clean_tmp_dir()","title":"Send plots"},{"location":"plot_ex/#send-a-plot","text":"The TelegramBot provides a simple to send matplotlib plots.","title":"Send a plot"},{"location":"plot_ex/#example","text":"","title":"Example"},{"location":"plot_ex/#screenshot","text":"","title":"Screenshot"},{"location":"plot_ex/#code","text":"from bob_telegram_tools.bot import TelegramBot import matplotlib.pyplot as plt token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) plt.plot([1, 2, 3, 4]) plt.ylabel('some numbers') bot.send_plot(plt) # This method delete the generetad image bot.clean_tmp_dir()","title":"Code"},{"location":"utilities/","text":"Package containing the Telegram utils functions and classes. TelegramTqdm This class allows to send through a Telegram Bot a progress bar. __call__ ( self , iterable = None , show_last_update = False , desc = None , total = None , leave = True , ncols = None , mininterval = 1.0 , maxinterval = 10.0 , miniters = None , ascii = False , disable = False , unit = 'it' , unit_scale = False , dynamic_ncols = False , smoothing = 0.3 , bar_format = None , initial = 0 , position = None , postfix = None , unit_divisor = 1000 , gui = False , ** kwargs ) special Progress bar getting function. It uses the same interface of the tqdm library. Returns: Type Description tqdm object Source code in bob_telegram_tools\\utils.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def __call__ ( self , iterable = None , show_last_update = False , desc = None , total = None , leave = True , ncols = None , mininterval = 1.0 , maxinterval = 10.0 , miniters = None , ascii = False , disable = False , unit = 'it' , unit_scale = False , dynamic_ncols = False , smoothing = 0.3 , bar_format = None , initial = 0 , position = None , postfix = None , unit_divisor = 1000 , gui = False , ** kwargs ): \"\"\" Progress bar getting function. It uses the same interface of the [tqdm](https://tqdm.github.io) library. Returns: tqdm object \"\"\" params = { 'desc' : desc , 'total' : total , 'leave' : leave , 'file' : self . tg_io , 'ncols' : ncols , 'mininterval' : mininterval , 'maxinterval' : maxinterval , 'miniters' : miniters , 'ascii' : ascii , 'disable' : disable , 'unit' : unit , 'unit_scale' : unit_scale , 'dynamic_ncols' : dynamic_ncols , 'smoothing' : smoothing , 'bar_format' : bar_format , 'initial' : initial , 'position' : position , 'postfix' : postfix , 'unit_divisor' : unit_divisor , 'gui' : gui } params . update ( kwargs ) if iterable is not None : params [ 'iterable' ] = iterable return tqdm ( ** params ) __init__ ( self , bot , show_last_update = False ) special Constructor Parameters: Name Type Description Default bot TelegramBot TelegramBot object required show_last_update bool True to receive the time of the last update False Source code in bob_telegram_tools\\utils.py 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , bot : TelegramBot , show_last_update : bool = False ): \"\"\" Constructor Arguments: bot: TelegramBot object show_last_update: True to receive the time of the last update \"\"\" self . bot = bot self . tg_io = _TelegramIO ( self . bot , show_last_update )","title":"Utils"},{"location":"utilities/#bob_telegram_tools.utils","text":"Package containing the Telegram utils functions and classes.","title":"bob_telegram_tools.utils"},{"location":"utilities/#bob_telegram_tools.utils.TelegramTqdm","text":"This class allows to send through a Telegram Bot a progress bar.","title":"TelegramTqdm"},{"location":"utilities/#bob_telegram_tools.utils.TelegramTqdm.__call__","text":"Progress bar getting function. It uses the same interface of the tqdm library. Returns: Type Description tqdm object Source code in bob_telegram_tools\\utils.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def __call__ ( self , iterable = None , show_last_update = False , desc = None , total = None , leave = True , ncols = None , mininterval = 1.0 , maxinterval = 10.0 , miniters = None , ascii = False , disable = False , unit = 'it' , unit_scale = False , dynamic_ncols = False , smoothing = 0.3 , bar_format = None , initial = 0 , position = None , postfix = None , unit_divisor = 1000 , gui = False , ** kwargs ): \"\"\" Progress bar getting function. It uses the same interface of the [tqdm](https://tqdm.github.io) library. Returns: tqdm object \"\"\" params = { 'desc' : desc , 'total' : total , 'leave' : leave , 'file' : self . tg_io , 'ncols' : ncols , 'mininterval' : mininterval , 'maxinterval' : maxinterval , 'miniters' : miniters , 'ascii' : ascii , 'disable' : disable , 'unit' : unit , 'unit_scale' : unit_scale , 'dynamic_ncols' : dynamic_ncols , 'smoothing' : smoothing , 'bar_format' : bar_format , 'initial' : initial , 'position' : position , 'postfix' : postfix , 'unit_divisor' : unit_divisor , 'gui' : gui } params . update ( kwargs ) if iterable is not None : params [ 'iterable' ] = iterable return tqdm ( ** params )","title":"__call__()"},{"location":"utilities/#bob_telegram_tools.utils.TelegramTqdm.__init__","text":"Constructor Parameters: Name Type Description Default bot TelegramBot TelegramBot object required show_last_update bool True to receive the time of the last update False Source code in bob_telegram_tools\\utils.py 34 35 36 37 38 39 40 41 42 43 44 def __init__ ( self , bot : TelegramBot , show_last_update : bool = False ): \"\"\" Constructor Arguments: bot: TelegramBot object show_last_update: True to receive the time of the last update \"\"\" self . bot = bot self . tg_io = _TelegramIO ( self . bot , show_last_update )","title":"__init__()"},{"location":"utilities_ex/","text":"Telegram Progress Bar In order to receive a progress bar not strictly related to your keras training you can use the TelegramTqdm class by simple reusing the (widely adopted) tqdm interface. Example Screenshot Code from time import sleep from bob_telegram_tools.utils import TelegramTqdm from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) pb = TelegramTqdm(bot) for i in pb(range(20)): sleep(1)","title":"Telegram ProgressBar"},{"location":"utilities_ex/#telegram-progress-bar","text":"In order to receive a progress bar not strictly related to your keras training you can use the TelegramTqdm class by simple reusing the (widely adopted) tqdm interface.","title":"Telegram Progress Bar"},{"location":"utilities_ex/#example","text":"","title":"Example"},{"location":"utilities_ex/#screenshot","text":"","title":"Screenshot"},{"location":"utilities_ex/#code","text":"from time import sleep from bob_telegram_tools.utils import TelegramTqdm from bob_telegram_tools.bot import TelegramBot token = '<your_token>' user_id = int('<your_chat_id>') bot = TelegramBot(token, user_id) pb = TelegramTqdm(bot) for i in pb(range(20)): sleep(1)","title":"Code"}]}